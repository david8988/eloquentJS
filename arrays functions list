
function createNode(x){
  return {value:x,rest:null}
}

function addNode(list,node){
  if(list.rest===null){
    list.rest=node;
  }else{
    addNode(list.rest,node);
  }  
}


function arrayToList(arr){ 
  let l; 
  if(arr.length===1){    
    l=createNode(arr[0]);   
    return l;
  }else{  
    l=createNode(arr[0]);     
    arr.shift();        
    if(arr.length===1){
      addNode(l,createNode(arr[0]));
      return l;
    }else{    
      while(arr.length>=1){       
        addNode(l,createNode(arr[0]));  
        arr.shift();
      }
      return l;
    }
    
  }
  
}

console.log(arrayToList([1,2,3]));



function listToArray(list){
  if(list.value!==null&&list.rest===null){
    return [list.value];
  }else{
    let arr=[];
    while(list.rest!==null){
        arr.push(list.value);
        list=list.rest;
    }   
    return arr;
  }
}


console.log(listToArray({ value: 1, rest:null}));
console.log(listToArray({ value: 1, rest: { value: 2, rest: { value: 3, rest: {value:"SDSA", rest:null}  } } }));


function prepend(e,list){
  let newList=createNode(e);
  newList.rest=list;
  return newList;
}


console.log(prepend("david",{ value: 1, rest: { value: 2, rest: { value: 3, rest: null } } }));


function nth(list,n){
  if(n===0){
    if(list.value!==null){
      return list.value;
    }
  }else if(n>0){
    let count=0;
    let values=0;
    let b=list;
    while(b.rest!==null){
      b=b.rest;
      values++;
    }    
    while(list.rest!==null && count<n){
      list=list.rest;           
      count++;
      
    }
    if(n<=values){
      return list.value;
    }
     
  }

  
}
console.log("nth")
console.log(nth({value:5,rest:{value:"X",rest:{value:"sebas",rest:{value:false,rest:{value:"ultimo",rest:null}}}}},4));


console.log("recursive nth")

function nthRecursive(list,n){
  if(n===0 && list!==null){    
    if(list.value!==null ){      
      return list.value;
    }
  }else if(n>0 && list!==null){    
    return nthRecursive(list.rest,n-1);     
    }  
}

console.log(nthRecursive({value:5,rest:{value:"X",rest:{value:"sebas",rest:{value:false,rest:{value:"ultimo",rest:null}}}}},-1));


function flatten(arr){
  return arr.reduce((acum,elem)=>{    
    if(Array.isArray(elem)){      
      return acum.concat(elem);      
    }else{
      return acum.concat([elem]);
    }
    
  },[]);
}

