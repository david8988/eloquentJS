/// 1. vector type

class Vec{
  constructor(x,y){
    this.x=x;
    this.y=y;
  }
  plus(vector){
    return new Vec(this.x+vector.x,this.y+vector.y);
  }
  minus(vector){
    return new Vec(this.x-vector.x,this.y-vector.y);
  }
  get length(){
    return Math.sqrt(this.x*this.x+this.y*this.y);
  } 
}

let vector1=new Vec(3,4);
console.log(vector1)
let vector2=new Vec(8,6);
console.log(vector2)
console.log(vector1.plus(vector2));
console.log(vector1.minus(vector2));
console.log(vector1.length)
console.log(vector2.length)



///2. groups

class Group{
  constructor(){
    this.members=[];
  }
  add(value){
    if(this.members.every(v=> v!==value)){
      this.members.push(value);
    }    
  }
  delete(value){
    if(this.members.some(v=>v===value)){
      this.members.splice(this.members.indexOf(value),1);
    }
  }
  has(value){
    if(this.members.some(v=>v===value)){
      return true;
    }
    return false;
  }

  static from(iterableObject){
    let newG= new Group();
    iterableObject.forEach(v=>newG.add(v));
    return newG;
  }
}

let myGroup=new Group();
myGroup.add(14);
myGroup.add(45);
myGroup.add(4);
myGroup.add(4);
myGroup.add(4);
console.log(myGroup)
myGroup.delete(14);
console.log(myGroup)
myGroup.delete(4);
console.log(myGroup)
myGroup.delete(45);
console.log(myGroup)
myGroup.add(1);
myGroup.add(25);
myGroup.add(404);
console.log(myGroup)
console.log(myGroup.has(404))
console.log(Group.from(["mama","papa","hijo","hija","tio","abuelo","mama","mama","papa"]))


////////////solucion de  ejs

class Group {
  constructor() {
    this.members = [];
  }

  add(value) {
    if (!this.has(value)) {
      this.members.push(value);
    }
  }

  delete(value) {
    this.members = this.members.filter(v => v !== value);
  }

  has(value) {
    return this.members.includes(value);
  }

  static from(collection) {
    let group = new Group;
    for (let value of collection) {
      group.add(value);
    }
    return group;
  }
}

let group = Group.from([10, 20]);
console.log(group.has(10));
// → true
console.log(group.has(30));
// → false
group.add(10);
group.delete(10);
console.log(group.has(10));



//3. iterable groups



class Group{
  constructor(){
    this.members=[];
  }
  add(value){
    if(this.members.every(v=> v!==value)){
      this.members.push(value);
    }    
  }
  delete(value){
    if(this.members.some(v=>v===value)){
      this.members.splice(this.members.indexOf(value),1);
    }
  }
  has(value){
    if(this.members.some(v=>v===value)){
      return true;
    }
    return false;
  }

  static from(iterableObject){
    let newG= new Group();
    iterableObject.forEach(v=>newG.add(v));
    return newG;
  }

  [Symbol.iterator]() {
    return new GroupIterator(this);
  }


}


class GroupIterator{
  constructor(group){
    this.current=0;
    this.group=group;
  }
  next(){
    if(this.current===this.group.members.length) return {done:true};
    let value={
      current:this.current,
      value:this.group.members[this.current]
    }
    this.current++;
    return {value, done:false};
  }
}


let grupo= new Group();
grupo.add("nino");
grupo.add("ana");
grupo.add("pedro");
grupo.add("miguel");
console.log(grupo)
for(let item of grupo){
  console.log(item);
}


///////////////////

4.Borrowing a method


let map = {one: true, two: true, hasOwnProperty: true};

console.log(Object.prototype.hasOwnProperty.call(map, "one"));


